# -*- coding:utf-8 -*-
# Anaconda 4.3.0 環境

import numpy
import matplotlib.pyplot as plt

# scikit-learn ライブラリ関連
#from sklearn import datasets                            # 
#from sklearn.cross_validation import train_test_split  # scikit-learn の train_test_split関数の old-version
from sklearn.model_selection import train_test_split    # scikit-learn の train_test_split関数の new-version
#from sklearn.preprocessing import StandardScaler        # scikit-learn の preprocessing モジュールの StandardScaler クラス
from sklearn.metrics import accuracy_score              # 
from sklearn.svm import SVC                             # 

# 自作クラス
import Plot2D

def main():
    #==================================================================================================
    # RBF-Kernelを使用したSVMによる非線形問題（２クラス）
    #==================================================================================================
    print("Start Process2")
    #====================================================
    #   Pre Process（前処理）
    #====================================================
    #----------------------------------------------------
    #   read & set  data (randam data)
    #----------------------------------------------------
    # 乱数の seed
    numpy.random.seed(0)

    # 標準正規分布に従う乱数で row:200, col:2 の行列生成
    dat_X = numpy.random.randn( 200, 2 )

    # dat_X を XORした結果でクラス分けする
    dat_y = numpy.logical_xor( 
                (dat_X[:,0] > 0),  # １列目と２列目どちらかが正と成るか？
                (dat_X[:,1] > 0)
            )   
    
    dat_y = numpy.where( dat_y > 0 , 1, -1 )

    #---------------------------------------------------------------------
    # トレーニングされたモデルの性能評価を未知のデータで評価するために、
    # データセットをトレーニングデータセットとテストデータセットに分割する
    #---------------------------------------------------------------------
    # scikit-learn の cross_validation モジュールの関数 train_test_split() を用いて、70%:テストデータ, 30%:トレーニングデータに分割
    train_test = train_test_split(       # 戻り値:list
                     dat_X, dat_y,       # 
                     test_size = 0.3,    # 0.0~1.0 で指定 
                     random_state = 0    # 
                 )
    """
    # train_test_split() の戻り値の確認
    print("train_test[0]:", train_test[0])  # X_tarin
    print("train_test[1]:", train_test[1])  # X_test
    print("train_test[2]:", train_test[2])  # y_train
    print("train_test[3]:", train_test[3])  # y_test
    print("train_test[4]:", train_test[4])  # inavlid value
    print("train_test[5]:", train_test[5])  # inavlid value
    """
    X_train = train_test[0]
    X_test  = train_test[1]
    y_train = train_test[2]
    y_test  = train_test[3]

    #----------------------------------------------------------------------------------------------------
    # scikit-learn の preprocessing モジュールの StandardScaler クラスを用いて、データをスケーリング
    #----------------------------------------------------------------------------------------------------
    # このケースではデータが特に意味のないランダムデータなので正規化の必要はない
    """
    stdScaler = StandardScaler()
    
    # X_train の平均値と標準偏差を計算
    stdScaler.fit( X_train )

    # 求めた平均値と標準偏差を用いて標準化
    X_train_std = stdScaler.transform( X_train )
    X_test_std  = stdScaler.transform( X_test )

    # 分割したデータを行方向に結合（後で plot データ等で使用する）
    X_combined_std = numpy.vstack( (X_train_std, X_test_std) )  # list:(X_train_std, X_test_std) で指定
    y_combined     = numpy.hstack( (y_train, y_test) )

    # 学習データを正規化（後で plot データ等で使用する）
    dat_X_std = numpy.copy(dat_X)                                           # ディープコピー（参照コピーではない）
    dat_X_std[:,0] = ( dat_X[:,0] - dat_X[:,0].mean() ) / dat_X[:,0].std()  # 0列目全てにアクセス[:,0]
    dat_X_std[:,1] = ( dat_X[:,1] - dat_X[:,1].mean() ) / dat_X[:,1].std()
    """

    #====================================================
    #   Learning Process
    #====================================================
        
    #====================================================
    #   汎化性能の評価
    #====================================================
    #-------------------------------------
    # サンプルデータの図示
    #-------------------------------------
    plt.grid(linestyle='-')

    # class +1 plot(赤の□)
    plt.scatter(
        dat_X[ dat_y == 1, 0 ], dat_X[ dat_y == 1 , 1 ],
        color = "red",
        edgecolor = 'black',
        marker = "s",
        label = "1"
    )
    # class -1 plot(青のx)
    plt.scatter(
        dat_X[ dat_y == -1, 0 ], dat_X[ dat_y == -1 , 1 ],
        color = "blue",
        edgecolor = 'black',
        marker = "x",
        label = "-1"
    )

    plt.title("XOR data (generated by ramdam Normal Disuturibution)")     # title
    plt.xlim( [-3,3] )
    plt.ylim( [-3,3] )
    plt.legend(loc = "upper left")              # 凡例    
    plt.tight_layout()                          # グラフ同士のラベルが重ならない程度にグラフを小さくする。
    
    plt.savefig("./SVM_scikit-learn_3.png", dpi=300)
    plt.show()

    #-------------------------------
    # 識別結果＆識別領域の表示
    #-------------------------------

    print("Finish main()")
    return

    
if __name__ == '__main__':
     main()

